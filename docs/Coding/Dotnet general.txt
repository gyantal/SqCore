----------------------------

The Dotnet source code can be found on GitHub here: https://github.com/dotnet
For example: 
    The System namespace is here that contains almost all the base classes:
    https://github.com/dotnet/runtime/tree/7fc8fb56327e9696ce9baa80f997e3f50675af1f/src/libraries/System.Private.CoreLib/src/System
    The 'class List<>' source code is in the runtime/System project:
    https://github.com/dotnet/runtime/blob/7fc8fb56327e9696ce9baa80f997e3f50675af1f/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs
----------------------------

-------------- grokking C# ThreadPool

https://learn.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool
What uses ThreadPool threads:
- directly call of ThreadPool.QueueUserWorkItem()
- Timer callbacks
- Task.Run() uses the ThreadPool to execute the given action.
- Task Parallel Library (TPL). Task.Parallel() runs.
- Async-await:
By default, if you use 'await', in a console application or a web server environment like ASP.NET Core, the 'continuation' runs on the ThreadPool.
e.g. await reader.ReadToEndAsync();
Then the ReadToEndAsync() inner instructions are executed on the current thread. Then that thread saves its state context and terminates.
And then when the fileread is completed, the instruction After the await are executed on a ThreadPool thread.
In ConsoleApp. With WindowsApp, it is more complicated, because execution has to filtered back to the mainUI thread.


    ThreadPool.ThreadCount : The number of thread pool threads that currently exist.

    ThreadPool.GetMinThreads(out int minWorkerTh, out int minIoThread); 
The minimum number of threads the thread pool immediately creates before switching to a sophisticated algorithm (that might not create a new thread even it is needed now) based on system resources.
The MinWorker is usually the Logical Processors: 2*2 = 4 on Linux Server, and 2*12=24 on Agy PC.
So, if minWorkerTh = 24, and Timers or Task Parallel Library (TPL) needs new workerthreads, then until 24 is reached, these threads are immediately created if needed. And that working task is instantly executed.
Once, 24 active threads are reached, when more is needed, a new thread might be not created (imagine a slow CPU). In that case, WorkItem is queued, and that task will be executed once a threadPool thread is free.

    ThreadPool.GetMaxThreads(out int maxWorkerTh, out int maxIoThread); // The maximum number of worker threads ever possible to be created.

There is a separate pool for CPU working and IO, but we don't have to worry about it.

In general this [minWorkerTh..maxWorkerTh] range is not important for us.
Examples: 
Linux: WorkerTh: [4...32767], IoTh: [1...1000]
Windows: WorkerTh: [24...32767], IoTh: [1...1000]

This is how to log out the ThreadPool info:
    string threadEnvStr = $"ProcThreads#:{Process.GetCurrentProcess().Threads.Count}, ThreadPoolTh#:{ThreadPool.ThreadCount}, WorkerTh: [{minWorkerTh}...{maxWorkerTh}], IoTh: [{minIoThread}...{maxIoThread}]";

>The ".NET runtime" manages the details of thread lifetime and idle reclamation. Similar to how the GC Garbage Collector runs periodically.
So, ThreadPool runs in a separate thread, and periodically checks if workerThreads idle and what timeout, and reclaim them if necessary.
"The ThreadPool in .NET checks for idle threads to reclaim at regular intervals. According to the official Microsoft documentation and other reliable sources, this interval is typically every 10 seconds."
"Idle Timeout Interval: The ThreadPool checks for idle threads every 10 seconds. If a thread has been idle for a specified timeout period (which is 10 seconds by default), it is eligible for reclamation."
"Idle Thread Reclamation: When the ThreadPool detects an idle thread that has not been active for the idle timeout period, it reclaims (terminates) the thread to reduce resource usage"

At program start, a typical log shows that there are 0 ThreadPool threads: "ProcThreads#:33, ThreadPoolTh#:0, WorkerTh: [24...32767], IoTh: [1...1000]"
Good. Expected. Because some simply C# console apps will never use Timers or Task Parallel Library (TPL) to run tasks in parallel, so in these apps ThreadPool keeps having 0 threads and do nothing extra burden.

Later, in one experiment, as the Timer class used ThreadPool.QueueUserWorkItem(), so ThreadPoolTh went to 8. But 10 seconds later, it decreased to 4 threads only. 
Even though on Agy PC, the minWorkerTh is 24, still, the current number of ThreadPool threads went back from 8 to 4. 
Probably to save system resources. Windows kernel has to handle All threads of the process to schedule CPU execution. So, the less threads are the better.

Example run. SqCoreWeb web server, 2024-05-16, Windows, 12 core (24 HT core)
At program start in Main(): ProcThreads#:33, ThreadPoolTh#:0
10 sec later:               ProcThreads#:89, ThreadPoolTh#:22
20 sec later:               ProcThreads#:72, ThreadPoolTh#:5
30 sec later:               ProcThreads#:74, ThreadPoolTh#:7

Example run. SqCoreWeb web server, 2024-05-16, Linux, 2 core.
At program start in Main(): ProcThreads#:13, ThreadPoolTh#:0
10 sec later:               ProcThreads#:53, ThreadPoolTh#:10
20 sec later:               ProcThreads#:47, ThreadPoolTh#:4
30 sec later:               ProcThreads#:46, ThreadPoolTh#:3


-------------- NodaTime for replacing C# DateTime? Good, but 2-3x more data. Don't use it for big data. You can use it for sure way of converting between time-zones.

"Since version 4.0 Npgsql (PostgreSql) supports and suggests it as recommended way of working with Date and Time."
https://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html
"neither DateTimeOffset nor DateTime are good types to use for genuinely local date and time values."
"with DateTimeOffset you know what that particular time is in some unspecified time zone, but you don't know what the local time will be a minute later,
as the offset for that time zone could change (usually due to daylight saving time changes)."
"few issues around ambiguous or invalid local date and time values. These occur due to daylight saving changes: if the clock goes forward (e.g. from 1am to 2am)
that introduces some invalid local date and time values (e.g. 1.30am doesn't occur on that day). 
If the clock goes backward (e.g. from 2am to 1am) that introduces ambiguities: 1.30am occurs twice."
"days which don't start at midnight due to daylight saving changes (for example, Sunday October 17th 2010 in Brazil started at 1am)."
"Given all this complexity, you should at least have an API"
https://www.reddit.com/r/csharp/comments/e6j6uu/what_are_the_long_term_costs_and_benefits_to/
"Always use UTC. Always. You can convert it to local super easily then. I get heart palpitations now when I see a non UTC timestamp in a DB lol."
"We used Noda time on a recent project along with another package that allowed us to do some really annoying date math easily. 
If you're just doing normal date/time stuff like storing dates I wouldn't bother with it. 
But if you're doing a lot of date related math I would lean on these packages. "
"Whether you use DateTime + some time zone info, DateTimeOffset, NodaTime"
"But System.DateTimeOffset (and even System.DateTime with new methods and extensions) has taken most of its common use-cases. 
And proper time-zone discipline ("use UTC until display-time", basically) handles any small gaps in functionality that remain."
"NodaTime is still useful, but not as useful as it once was"
"Unless I am misunderstanding Noda Time (I've never used it), it sounds exactly like what DateTimeOffset accomplishes. 
Why use Noda Time over the built-in alternative? Also, everyone should basically be defaulting to UTC unless there is an actual need for something less precise."
"DateTimeOffset doesn't have time zones logic." Yet. It has.
>There are cons of using NodaTime in our code: it is another extra dependency to maintain over time. Microsoft might make it obsolete.
C# DateTime is 8 bytes. Noda Date is 4*4=16 bytes. And time is 2*4=8 bytes. Altogether Node is 16+8=24 bytes.
Plus the Serialization overhead (if you want to be fast).

>Conclusion (NodaTime): use standard C# DateTime or DateTimeOffset (for performance) most of the time (90%) in the code and keep it all in Utc.
We can use NodaTime in 2 places: 1. When Broker simulation is needed (very few cases), then use Noda Time. 
Because QuantConnect uses it anyway. So, use NodaTime only in QuantConnect. 2. Any other place we can use when there is no big DateTime data (so no Json, or no RAM problem.). 
E.g. Simulator.CurrentTime. But also it can be used other places in the code when it is only a small 1-2 objects. But not when a DateTime array is stored in RAM.
