
1. How to check undefined in Typescript ? See options here:
https://stackoverflow.com/questions/28975896/is-there-a-way-to-check-for-both-null-and-undefined

" a situation where you do want to allow null and undefined, you can define the type as Type | null | undefined."

https://stackoverflow.com/questions/40349987/how-to-suppress-error-ts2533-object-is-possibly-null-or-undefined
https://stackoverflow.com/questions/40349987/how-to-suppress-error-ts2533-object-is-possibly-null-or-undefined
The general advice:
Either this: 
if (object != null) {   // Use this if the variable 'can be null': this non-exact 'equality checks (the ==, not the ===)' checks for both null and undefined
    // continue - error suppressed when used in this way.
}
Or Alternatively, you could use type coercion:  (if you are 100% sure it cannot be null). I think the better option is to cast the desired value with as if you 100% sure. 
const objectX = object as string
let c: number = (a as string[]).length; // ok
Or
"If you know the type will never be null or undefined, you should declare it as foo: Bar without the ?. 
Declaring a type with the ? Bar syntax means it could potentially be undefined, which is something you need to check for."

2. Curly Braces.
This is the standard in JS, TS. Follow this.

if(myBoolean == true) {
    //do something
} else {
    //do something else
}
	
3.
"take a moment to consider if you actually need jQuery as a dependency. Maybe you can include a few lines of utility code, and forgo the requirement."
http://youmightnotneedjquery.com/
jQuery: $('.my #awesome selector');
equivalent vanilla JS: document.querySelectorAll('.my #awesome selector');
But it reveals, that jQuery is wasting CPU time. It searches for ID's classnames, names. All 3.
However, when we own the source code, we actually know that we only want to search among IDs only, not classnames.
So, this is more efficient use of CPU:
(document.getElementById('MainDivOverVidBkg') as HTMLElement).style.color = '#ffffff';
So, if possible, avoid jQuery, but do DOM manipulation direct. (or write tiny utility function). That way you learn DOM  manipulation better.

4.
Use 2 spaces Tab (instead of 4) in HTML, CSS, JS, TS.
This is the standard TS formatter in Vscode anyway. Also SCSS formatter in Prettier does 2 spaces too.
In C# VsCode does 4 spaces. Keep that standard.
https://www.reddit.com/r/javascript/comments/5rjrcy/why_is_twospace_tab_indent_becoming_the_standard/
"in recent years there has been a massive switch from four to two spaces as the standard across JavaScript which seems to have crept into other languages like HTML, CSS/Sass, JSON, etc."
"Two spaces is popular in JS because "callback hell""

5.
JavaScript: Efficient way to handle the over-use of multiple string concatenation. 
There is no C# style StringBulider in JS. 
Therefore decide between "+=" string concatenation vs. Array.join(). 
Verdict: just use "+="
A. There is no official StringBuilder in JS in 2023. A fact. Mostly, because it is not required. (because += supports it and Array.join() supports it.) See later.
B. "+=" speed is implementation dependent (NodeJs vs. Browsers), but Chrome (V8) engine C++ code uses a StringBuilder as an underlying. So, it is already the most efficient. "+=" operators are like StringBuilder.Append() in C#. And it only evaluates the 'string' when it is needed to show the full string. So, succesive "+=" operators will not evaluate the string.
However, don't use "myStr = myStr + 'a'", because that might not be the same thing as "+="
Proof: https://github.com/v8/v8/blob/fd334b3216488011b368ec4652819e08c38d0d36/src/string-builder.cc
https://stackoverflow.com/a/54970240/984471
C. 
Actually, Array.join() is faster if you have large strings (1K) or you concatenate "a" about 2M x times.
D.
"if small strings (100-1000 chars) in final output: it is better to go with string concat +, as otherwise going with Array will need several Array to String conversions at the end which is performance overload."
E.
George conclusion: += vs. Array.join(). 
Too complicated to decide which is better. For 200x concats, "+=" is faster. For 2Mx concats, Array.join() is faster. You can bechmark at every program code,
but we don't want to waste too much time on that.
So, SqCore source code policy is to use "+=" all the time.
And we should be aware that using "+=" is NOT performance penalty in 2023 (in the browser), because the underlying browser C++ implementation is using a StringBuilder properly. It might be a penalty in NodeJs, as this is implementation dependent.








