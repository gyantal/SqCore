
**************** UTF8 vs. UTF16
http://sqlite.1065341.n5.nabble.com/benchmarking-UTF8-vs-UTF16-encoded-databases-td30067.html
"In the future I am using UTF8 encoded databases since the conversion of
strings is a small thing for the system. The advantages of using UTF8
are many:
1. Faster in most cases
2. Smaller databases (30% smaller in benchmark test database)
3. Less memory usage OR more information will fit in memory."
"Well of course it comes at no surprise that if your database is
primarily US-ASCII text, UTF-8 will be better.  Smaller sizes mean
smaller comparisons and more packed b-trees.  UTF-16 is only good if
you have a lot of text that would be encoded with >= 2 UTF-8 code
units."

https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/
"High performance JSON APIs have been added, for reader/writer, object model and serialization scenarios. These APIs were built from scratch on top of Span<T> 
and use UTF8 under the covers instead of UTF16 (like string)."


- For Json processing, use Utf8JsonReader /writer/document/serializer, System.Text.Json.JsonSerializer, etc.  2x faster than other JSon parsers.
https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/

*********** Difference between InvariantCulture and Ordinal string comparison: 
Invariant is a linguistically appropriate type of comparison.
Ordinal is a binary type of comparison. (faster)

Use comparisons with StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase for better performance.
Do not use string operations based on StringComparison.InvariantCulture in most cases.

https://stackoverflow.com/questions/492799/difference-between-invariantculture-and-ordinal-string-comparison

"you better use String1 == String2 which is intrinsically String1.Equals(String2) and it is by default an ordinal case-sensitive comparison."

>There is good performance test results published C# String Comparision Tests which tells the performance of each different string comparision methods and their time. 
https://rhale78.wordpress.com/2011/05/16/string-equality-and-performance-in-c/



