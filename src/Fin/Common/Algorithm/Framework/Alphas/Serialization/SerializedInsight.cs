using Newtonsoft.Json;
using QuantConnect.Util;
using System;

namespace QuantConnect.Algorithm.Framework.Alphas.Serialization
{
    /// <summary>
    /// DTO used for serializing an insight that was just generated by an algorithm.
    /// This type does not contain any of the analysis dependent fields, such as scores
    /// and estimated value
    /// </summary>
    public class SerializedInsight
    {
        private double _createdTime;

        /// <summary>
        /// See <see cref="Insight.Id"/>
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// See <see cref="Insight.GroupId"/>
        /// </summary>
        [JsonProperty("group-id")]
        public string GroupId { get; set; }

        /// <summary>
        /// See <see cref="Insight.SourceModel"/>
        /// </summary>
        [JsonProperty("source-model")]
        public string SourceModel { get; set; }

        /// <summary>
        /// Pass-through for <see cref="CreatedTime"/>
        /// </summary>
        [Obsolete("Deprecated as of 2020-01-23. Please use the `CreatedTime` property instead.")]
        [JsonProperty("generated-time")]
        public double GeneratedTime
        {
            get { return _createdTime; }
            set { _createdTime = value; }
        }

        /// <summary>
        /// See <see cref="Insight.GeneratedTimeUtc"/>
        /// </summary>
        [JsonProperty("created-time")]
        public double CreatedTime
        {
            get { return _createdTime; }
            set { _createdTime = value; }
        }

        /// <summary>
        /// See <see cref="Insight.CloseTimeUtc"/>
        /// </summary>
        [JsonProperty("close-time")]
        public double CloseTime { get; set; }

        /// <summary>
        /// See <see cref="Insight.Symbol"/>
        /// The symbol's security identifier string
        /// </summary>
        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// See <see cref="Insight.Symbol"/>
        /// The symbol's ticker at the generated time
        /// </summary>
        [JsonProperty("ticker")]
        public string Ticker { get; set; }

        /// <summary>
        /// See <see cref="Insight.Type"/>
        /// </summary>
        [JsonProperty("type")]
        public InsightType Type { get; set; }

        /// <summary>
        /// See <see cref="Insight.ReferenceValue"/>
        /// </summary>
        [JsonProperty("reference")]
        public decimal ReferenceValue { get; set; }

        /// <summary>
        /// See <see cref="Insight.ReferenceValueFinal"/>
        /// </summary>
        [JsonProperty("reference-final")]
        public decimal ReferenceValueFinal { get; set; }

        /// <summary>
        /// See <see cref="Insight.Direction"/>
        /// </summary>
        [JsonProperty("direction")]
        public InsightDirection Direction { get; set; }

        /// <summary>
        /// See <see cref="Insight.Period"/>
        /// </summary>
        [JsonProperty("period")]
        public double Period { get; set; }

        /// <summary>
        /// See <see cref="Insight.Magnitude"/>
        /// </summary>
        [JsonProperty("magnitude")]
        [JsonConverter(typeof(JsonRoundingConverter))]
        public double? Magnitude { get; set; }

        /// <summary>
        /// See <see cref="Insight.Confidence"/>
        /// </summary>
        [JsonProperty("confidence")]
        [JsonConverter(typeof(JsonRoundingConverter))]
        public double? Confidence { get; set; }

        /// <summary>
        /// See <see cref="Insight.Weight"/>
        /// </summary>
        [JsonProperty("weight")]
        public double? Weight { get; set; }

        /// <summary>
        /// See <see cref="InsightScore.IsFinalScore"/>
        /// </summary>
        [JsonProperty("score-final")]
        public bool ScoreIsFinal { get; set; }

        /// <summary>
        /// See <see cref="InsightScore.Magnitude"/>
        /// </summary>
        [JsonProperty("score-magnitude")]
        [JsonConverter(typeof(JsonRoundingConverter))]
        public double ScoreMagnitude { get; set; }

        /// <summary>
        /// See <see cref="InsightScore.Direction"/>
        /// </summary>
        [JsonProperty("score-direction")]
        [JsonConverter(typeof(JsonRoundingConverter))]
        public double ScoreDirection { get; set; }

        /// <summary>
        /// See <see cref="Insight.EstimatedValue"/>
        /// </summary>
        [JsonProperty("estimated-value")]
        [JsonConverter(typeof(JsonRoundingConverter))]
        public decimal EstimatedValue { get; set; }

        /// <summary>
        /// Initializes a new default instance of the <see cref="SerializedInsight"/> class
        /// </summary>
        public SerializedInsight()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerializedInsight "/> class by copying the specified insight
        /// </summary>
        /// <param name="insight">The insight to copy</param>
        public SerializedInsight(Insight insight)
        {
            Id = insight.Id.ToStringInvariant("N");
            SourceModel = insight.SourceModel;
            GroupId = insight.GroupId?.ToStringInvariant("N");
            CreatedTime = Time.DateTimeToUnixTimeStamp(insight.GeneratedTimeUtc);
            CloseTime = Time.DateTimeToUnixTimeStamp(insight.CloseTimeUtc);
            Symbol = insight.Symbol.ID.ToString();
            Ticker = insight.Symbol.Value;
            Type = insight.Type;
            ReferenceValue = insight.ReferenceValue;
            ReferenceValueFinal = insight.ReferenceValueFinal;
            Direction = insight.Direction;
            Period = insight.Period.TotalSeconds;
            Magnitude = insight.Magnitude;
            Confidence = insight.Confidence;
            ScoreIsFinal = insight.Score.IsFinalScore;
            ScoreMagnitude = insight.Score.Magnitude;
            ScoreDirection = insight.Score.Direction;
            EstimatedValue = insight.EstimatedValue;
            Weight = insight.Weight;
        }
    }
}